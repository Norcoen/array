#! /bin/sh

# Test suite for array

set -e

. "`pwd`/array"

# test array_indexof

A=`array -n ' bob' ross '' khan ross '/\#$^' ro`

idx=`printf '%s\n' "$A" | array_indexof -n` || { echo 'Index of -n failed' >&2; exit 1; }
if [ "$idx" -ne 0 ] ; then
  echo "Index of -n, expected 0, got $idx" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof khan` || { echo 'Index of khan failed' >&2; exit 1; }
if [ "$idx" -ne 4 ] ; then
  echo "Index of khan, expected 4, got $idx" >&2
  exit 1
fi

if printf '%s\n' "$A" | array_indexof tim > /dev/null 2>&1 ; then
  echo "Index of tim should fail, got `printf '%s\n' "$A" | array_indexof tim`" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof ''` || { echo 'Index of failed' >&2; exit 1; }
if [ "$idx" -ne 3 ] ; then
  echo "Index of : expected 3, got $idx" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof ross` || { echo 'Index of ross failed' >&2; exit 1; }
if [ "$idx" -ne 2 ] ; then
  echo "Index of ross: expected 2, got $idx" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof '/\#$^'` || { echo 'Index of /\#$^ failed' >&2; exit 1; }
if [ "$idx" -ne 6 ] ; then
  echo "Index of /\#$^: expected 6, got $idx" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof ro` || { echo 'Index of ro failed' >&2; exit 1; }
if [ "$idx" -ne 7 ] ; then
  echo "Index of ro: expected 7, got $idx" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof ' bob'` || { echo 'Index of  bob failed' >&2; exit 1; }
if [ "$idx" -ne 1 ] ; then
  echo "Index of  bob: expected 1, got $idx" >&2
  exit 1
fi

# test array_nth

A=`array -e ' bob' ross '' khan ross '/\#$^' ro`

val=`printf '%s\n' "$A" | array_nth 3` || { echo 'array_nth 3 failed' >&2; exit 1; }
if [ "$val" != '' ] ; then
  echo "array_nth that should return the empty string, didn't." >&2
  exit 1
fi

# test array_element_encode, array_element_decode

E='look
ma
three lines and a %'
expect_encoded_E='look%0Ama%0Athree lines and a %25'
really_encoded_E=`printf '%s\n' "$E" | array_element_encode`

if [ "$expect_encoded_E" != "$really_encoded_E" ]; then
  echo "array_element_encode doesn't do the right thing" >&2
  echo "  wanted: $expect_encoded_E" >&2
  echo " but got: $really_encoded_E" >&2
  exit 1
fi

really_decoded_E=`echo "$really_encoded_E" | array_element_decode`
if [ "$E" != "$really_decoded_E" ]; then
  echo "array_element_decode doesn't do the right thing" >&2
  echo "  wanted: $E" >&2
  echo " but got: $really_decoded_E" >&2
  exit 1
fi

A1=`array "$E"`
if [ "`printf '%s\n' "$A1" | array_nth 0`" != "$E" ]; then
  echo "array_nth cannot handle encoded elements" >&2
  exit 1
fi

if [ "`printf '%s\n' "$A1" | array_indexof "$E"`" -ne 0 ]; then
  echo "array_indexof cannot handle encoded elements" >&2
  exit 1
fi

# test array_append

A=`array_append "$A" next`

idx=`printf '%s\n' "$A" | array_indexof next` || { echo 'Index of next failed' >&2; exit 1; }
if [ "$idx" -ne 8 ] ; then
  echo "Index of next: expected 8, got $idx" >&2
  exit 1
fi

idx=`printf '%s\n' "$A" | array_indexof ' bob'` || { echo 'Index of  bob failed' >&2; exit 1; }
if [ "$idx" -ne 1 ] ; then
  echo "Index of  bob: expected 1, got $idx" >&2
  exit 1
fi

# test array_len

len=`printf '%s\n' "$A" | array_len` || { echo 'array_len failed' >&2; exit 1; }
if [ "$len" -ne 9 ] ; then
  echo "array_len: expected 9, got $len" >&2
  exit 1
fi

# test array_remove
A=`printf '%s\n' "$A" | array_remove next`

if printf '%s\n' "$A" | array_indexof next > /dev/null 2>&1; then
  echo "Index of next should fail, got `printf '%s\n' "$A" | array_indexof next`" >&2
  exit 1
fi

A=`array first second third first`
A=`printf '%s\n' "$A" | array_remove first`

idx=`printf '%s\n' "$A" | array_indexof first` || { echo 'Index of failed' >&2; exit 1; }
if [ "$idx" -ne 2 ] ; then
  echo "Index of first: expected 2, got $idx" >&2
  exit 1
fi

A=`printf '%s\n' "$A" | array_remove first`

if printf '%s\n' "$A" | array_indexof first > /dev/null 2>&1; then
  echo "Index of first should fail, got `printf '%s\n' "$A" | array_indexof first`" >&2
  exit 1
fi

echo 'Tests successful'

